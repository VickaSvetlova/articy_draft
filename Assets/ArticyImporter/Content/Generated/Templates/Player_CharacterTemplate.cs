//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Articy.ManiacManfred;
using Articy.ManiacManfred.Features;
using Articy.Unity;
using Articy.Unity.Interfaces;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace Articy.ManiacManfred.Templates
{
    
    
    [Serializable()]
    public class Player_CharacterTemplate : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private ArticyValueMoraleFeature mMorale = new ArticyValueMoraleFeature();
        
        [SerializeField()]
        private ArticyValueCharacterFeature mCharacter = new ArticyValueCharacterFeature();
        
        [SerializeField()]
        private UInt64 mOwnerId;
        
        [SerializeField()]
        private UInt32 mOwnerInstanceId;
        
        public Articy.ManiacManfred.Features.MoraleFeature Morale
        {
            get
            {
                return mMorale.GetValue();
            }
            set
            {
                mMorale.SetValue(value);
            }
        }
        
        public Articy.ManiacManfred.Features.CharacterFeature Character
        {
            get
            {
                return mCharacter.GetValue();
            }
            set
            {
                mCharacter.SetValue(value);
            }
        }
        
        public UInt64 OwnerId
        {
            get
            {
                return mOwnerId;
            }
            set
            {
                mOwnerId = value;
                Morale.OwnerId = value;
                Character.OwnerId = value;
            }
        }
        
        public UInt32 OwnerInstanceId
        {
            get
            {
                return mOwnerInstanceId;
            }
            set
            {
                mOwnerInstanceId = value;
                Morale.OwnerInstanceId = value;
                Character.OwnerInstanceId = value;
            }
        }
        
        private void CloneProperties(object aClone, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.ManiacManfred.Templates.Player_CharacterTemplate newClone = ((Articy.ManiacManfred.Templates.Player_CharacterTemplate)(aClone));
            if ((Morale != null))
            {
                newClone.Morale = ((Articy.ManiacManfred.Features.MoraleFeature)(Morale.CloneObject(newClone, aFirstClassParent)));
            }
            if ((Character != null))
            {
                newClone.Character = ((Articy.ManiacManfred.Features.CharacterFeature)(Character.CloneObject(newClone, aFirstClassParent)));
            }
            newClone.OwnerId = OwnerId;
        }
        
        public object CloneObject(object aParent, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.ManiacManfred.Templates.Player_CharacterTemplate clone = new Articy.ManiacManfred.Templates.Player_CharacterTemplate();
            CloneProperties(clone, aFirstClassParent);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            int featureIndex = aProperty.IndexOf('.');
            if ((featureIndex != -1))
            {
                string featurePath = aProperty.Substring(0, featureIndex);
                string featureProperty = aProperty.Substring((featureIndex + 1));
                if ((featurePath == "Morale"))
                {
                    Morale.setProp(featureProperty, aValue);
                }
                if ((featurePath == "Character"))
                {
                    Character.setProp(featureProperty, aValue);
                }
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            int featureIndex = aProperty.IndexOf('.');
            if ((featureIndex != -1))
            {
                string featurePath = aProperty.Substring(0, featureIndex);
                string featureProperty = aProperty.Substring((featureIndex + 1));
                if ((featurePath == "Morale"))
                {
                    return Morale.getProp(featureProperty);
                }
                if ((featurePath == "Character"))
                {
                    return Character.getProp(featureProperty);
                }
            }
            return null;
        }
        #endregion
    }
}
