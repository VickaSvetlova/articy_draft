//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Articy.ManiacManfred;
using Articy.Unity;
using Articy.Unity.Interfaces;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace Articy.ManiacManfred.Features
{
    
    
    [Serializable()]
    public class ItemCombinationFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private ArticyValueArticyObject mValidCombination = new ArticyValueArticyObject();
        
        [SerializeField()]
        private ArticyValueArticyObject mCombinationResult = new ArticyValueArticyObject();
        
        [SerializeField()]
        private ArticyValueArticyObject mLinkIfSuccess = new ArticyValueArticyObject();
        
        [SerializeField()]
        private ArticyValueArticyObject mLinkIfFailure = new ArticyValueArticyObject();
        
        [SerializeField()]
        private UInt64 mOwnerId;
        
        [SerializeField()]
        private UInt32 mOwnerInstanceId;
        
        public ArticyObject ValidCombination
        {
            get
            {
                return mValidCombination.GetValue();
            }
            set
            {
                var oldValue = mValidCombination;
                mValidCombination.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "ItemCombination.ValidCombination", oldValue.GetValue(), mValidCombination.GetValue());
            }
        }
        
        public ArticyObject CombinationResult
        {
            get
            {
                return mCombinationResult.GetValue();
            }
            set
            {
                var oldValue = mCombinationResult;
                mCombinationResult.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "ItemCombination.CombinationResult", oldValue.GetValue(), mCombinationResult.GetValue());
            }
        }
        
        public ArticyObject LinkIfSuccess
        {
            get
            {
                return mLinkIfSuccess.GetValue();
            }
            set
            {
                var oldValue = mLinkIfSuccess;
                mLinkIfSuccess.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "ItemCombination.LinkIfSuccess", oldValue.GetValue(), mLinkIfSuccess.GetValue());
            }
        }
        
        public ArticyObject LinkIfFailure
        {
            get
            {
                return mLinkIfFailure.GetValue();
            }
            set
            {
                var oldValue = mLinkIfFailure;
                mLinkIfFailure.SetValue(value);
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "ItemCombination.LinkIfFailure", oldValue.GetValue(), mLinkIfFailure.GetValue());
            }
        }
        
        public UInt64 OwnerId
        {
            get
            {
                return mOwnerId;
            }
            set
            {
                mOwnerId = value;
            }
        }
        
        public UInt32 OwnerInstanceId
        {
            get
            {
                return mOwnerInstanceId;
            }
            set
            {
                mOwnerInstanceId = value;
            }
        }
        
        private void CloneProperties(object aClone, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.ManiacManfred.Features.ItemCombinationFeature newClone = ((Articy.ManiacManfred.Features.ItemCombinationFeature)(aClone));
            if ((mValidCombination != null))
            {
                newClone.mValidCombination = ((ArticyValueArticyObject)(mValidCombination.CloneObject(newClone, aFirstClassParent)));
            }
            if ((mCombinationResult != null))
            {
                newClone.mCombinationResult = ((ArticyValueArticyObject)(mCombinationResult.CloneObject(newClone, aFirstClassParent)));
            }
            if ((mLinkIfSuccess != null))
            {
                newClone.mLinkIfSuccess = ((ArticyValueArticyObject)(mLinkIfSuccess.CloneObject(newClone, aFirstClassParent)));
            }
            if ((mLinkIfFailure != null))
            {
                newClone.mLinkIfFailure = ((ArticyValueArticyObject)(mLinkIfFailure.CloneObject(newClone, aFirstClassParent)));
            }
            newClone.OwnerId = OwnerId;
        }
        
        public object CloneObject(object aParent, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.ManiacManfred.Features.ItemCombinationFeature clone = new Articy.ManiacManfred.Features.ItemCombinationFeature();
            CloneProperties(clone, aFirstClassParent);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "ValidCombination"))
            {
                ValidCombination = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
            if ((aProperty == "CombinationResult"))
            {
                CombinationResult = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
            if ((aProperty == "LinkIfSuccess"))
            {
                LinkIfSuccess = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
            if ((aProperty == "LinkIfFailure"))
            {
                LinkIfFailure = Articy.Unity.Interfaces.BaseScriptFragments.ObjectToModelRep(aValue);
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "ValidCombination"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(ValidCombination);
            }
            if ((aProperty == "CombinationResult"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(CombinationResult);
            }
            if ((aProperty == "LinkIfSuccess"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(LinkIfSuccess);
            }
            if ((aProperty == "LinkIfFailure"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(LinkIfFailure);
            }
            return null;
        }
        #endregion
    }
}
